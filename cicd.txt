protected V1Job createJobBody(String componentName, String componentId, String activityId, String taskName, String taskId, List<String> arguments, Map<String, String> taskInputProperties) {

		// Set Variables
		final String volMountPath = "/cache";
		final String cfgMapMountPath = "/props";

		// Initialize Job Body
		V1Job body = new V1Job(); // V1Job |
		
		// Create Metadata
		V1ObjectMeta jobMetadata = new V1ObjectMeta();
		jobMetadata.annotations(createAnnotations(componentName, componentId, activityId, taskId));
		jobMetadata.labels(createLabels(componentName, componentId, activityId, taskId));
		jobMetadata.generateName(PREFIX_JOB + "-");
		body.metadata(jobMetadata);

		// Create Spec
		V1JobSpec jobSpec = new V1JobSpec();
		V1PodTemplateSpec templateSpec = new V1PodTemplateSpec();
		V1PodSpec podSpec = new V1PodSpec();
		V1Container container = new V1Container();
		container.image(kubeImage);
		container.name("worker-cntr");
		container.imagePullPolicy(kubeImagePullPolicy);
		V1SecurityContext securityContext = new V1SecurityContext();
		securityContext.setPrivileged(true);
		container.setSecurityContext(securityContext);
		List<V1EnvVar> envVars = new ArrayList<V1EnvVar>();
		if (proxyEnabled) {
			envVars.addAll(createProxyEnvVars());
		}
		envVars.add(createEnvVar("DEBUG",kubeWorkerDebug.toString()));
		container.env(envVars);
		container.args(arguments);
		if (checkPVCExists(componentId, null, null, true)) {
			V1VolumeMount volMount = new V1VolumeMount();
			volMount.name(PREFIX_VOL_DATA);
			volMount.mountPath(volMountPath);
			container.addVolumeMountsItem(volMount);
			V1Volume workerVolume = new V1Volume();
			workerVolume.name(PREFIX_VOL_DATA);
			V1PersistentVolumeClaimVolumeSource workerVolumePVCSource = new V1PersistentVolumeClaimVolumeSource();
			workerVolume.persistentVolumeClaim(workerVolumePVCSource.claimName(getPVCName(componentId, null)));
			podSpec.addVolumesItem(workerVolume);
		}
		//Container ConfigMap Mount
		V1VolumeMount volMountConfigMap = new V1VolumeMount();
		volMountConfigMap.name(PREFIX_VOL_PROPS);
		volMountConfigMap.mountPath(cfgMapMountPath);
		container.addVolumeMountsItem(volMountConfigMap);
		
		//Creation of Projected Volume for multiple ConfigMaps
		V1Volume volumeProps = new V1Volume();
		volumeProps.name(PREFIX_VOL_PROPS);
		V1ProjectedVolumeSource projectedVolPropsSource = new V1ProjectedVolumeSource();
		List<V1VolumeProjection> projectPropsVolumeList = new ArrayList<V1VolumeProjection>();
		
		//Add Worfklow Configmap Projected Volume
		V1ConfigMap wfConfigMap = getConfigMap(componentId, activityId, null);
		if (wfConfigMap != null && !getConfigMapName(wfConfigMap).isEmpty()) {
			V1ConfigMapProjection projectedConfigMapWorkflow = new V1ConfigMapProjection();
			projectedConfigMapWorkflow.name(getConfigMapName(wfConfigMap));
			V1VolumeProjection configMapVolSourceWorkflow = new V1VolumeProjection();
			configMapVolSourceWorkflow.configMap(projectedConfigMapWorkflow);
			projectPropsVolumeList.add(configMapVolSourceWorkflow);	
		}
		//Add Task Configmap Projected Volume
		V1ConfigMap taskConfigMap = getConfigMap(componentId, activityId, taskId);
		if (taskConfigMap != null && !getConfigMapName(taskConfigMap).isEmpty()) {
			V1ConfigMapProjection projectedConfigMapTask = new V1ConfigMapProjection();
			projectedConfigMapTask.name(getConfigMapName(taskConfigMap));
			V1VolumeProjection configMapVolSourceTask = new V1VolumeProjection();
			configMapVolSourceTask.configMap(projectedConfigMapTask);
			projectPropsVolumeList.add(configMapVolSourceTask);
		}
		
		//Add all configmap projected volume
		projectedVolPropsSource.sources(projectPropsVolumeList);
		volumeProps.projected(projectedVolPropsSource);
		podSpec.addVolumesItem(volumeProps);
		
		List<V1Container> containerList = new ArrayList<V1Container>();
		containerList.add(container);
		podSpec.containers(containerList);
		V1LocalObjectReference imagePullSecret = new V1LocalObjectReference();
		imagePullSecret.name(kubeImagePullSecret);
		List<V1LocalObjectReference> imagePullSecretList = new ArrayList<V1LocalObjectReference>();
		imagePullSecretList.add(imagePullSecret);
		podSpec.imagePullSecrets(imagePullSecretList);
		podSpec.restartPolicy(kubeWorkerJobRestartPolicy);
		templateSpec.spec(podSpec);
		
		//Pod metadata. Different to the job metadata
		V1ObjectMeta podMetadata = new V1ObjectMeta();
		podMetadata.annotations(createAnnotations(componentName, componentId, activityId, taskId));
		podMetadata.labels(createLabels(componentName, componentId, activityId, taskId));
		templateSpec.metadata(podMetadata);
		
		jobSpec.backoffLimit(kubeWorkerJobBackOffLimit);
		jobSpec.template(templateSpec);
		Integer ttl = 60*60*24*kubeWorkerJobTTLDays;
		System.out.println("Setting Job TTL at " + ttl + " seconds");
		jobSpec.setTtlSecondsAfterFinished(ttl);
		body.spec(jobSpec);
		
		return body;
	}